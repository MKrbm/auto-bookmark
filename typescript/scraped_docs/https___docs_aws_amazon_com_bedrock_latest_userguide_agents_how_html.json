[
  {
    "page_content": "How Agents for Amazon Bedrock works\nBuild-time configurationRuntime process\nHow Agents for Amazon Bedrock works - Amazon Bedrock\n{\n    \"@context\" : \"https://schema.org\",\n    \"@type\" : \"BreadcrumbList\",\n    \"itemListElement\" : [\n      {\n        \"@type\" : \"ListItem\",\n        \"position\" : 1,\n        \"name\" : \"AWS\",\n        \"item\" : \"https://aws.amazon.com\"\n      },\n      {\n        \"@type\" : \"ListItem\",\n        \"position\" : 2,\n        \"name\" : \"Amazon Bedrock\",\n        \"item\" : \"https://docs.aws.amazon.com/bedrock/index.html\"\n      },\n      {\n        \"@type\" : \"ListItem\",\n        \"position\" : 3,\n        \"name\" : \"User Guide\",\n        \"item\" : \"https://docs.aws.amazon.com/bedrock/latest/userguide\"\n      },\n      {\n        \"@type\" : \"ListItem\",\n        \"position\" : 4,\n        \"name\" : \"Agents for Amazon Bedrock\",\n        \"item\" : \"https://docs.aws.amazon.com/bedrock/latest/userguide/agents.html\"\n      },\n      {\n        \"@type\" : \"ListItem\",\n        \"position\" : 5,\n        \"name\" : \"How Agents for Amazon Bedrock works\",\n        \"item\" : \"https://docs.aws.amazon.com/bedrock/latest/userguide/agents.html\"\n      }\n    ]\n}\nAWSDocumentationAmazon BedrockUser GuideBuild-time configurationRuntime processHow Agents for Amazon Bedrock worksAgents for Amazon Bedrock consists of the following two main sets of API operations to help you set up\n            and run an agent:\n             \n             \n        \n                Build-time API operations to create,\n                    configure, and manage your agents and their related resources\n            \n                Runtime API operations to invoke your agent with user input and to\n                    initiate orchestration to carry out a task.\n            \n            \n            Build-time configuration\n        \n            An agent consists of the following components:\n            \n            \n                 \n                 \n                 \n                \n                 \n            \n                    Foundation model – You choose a foundation model (FM) that the agent invokes to interpret user input and subsequent prompts in its orchestration process. The agent also invokes the FM to generate responses and follow-up steps in its process.\n                \n                    Instructions – You write instructions that describe what the agent is designed to do. With advanced prompts, you can further customize instructions for the agent at every step of orchestration and include Lambda functions to parse each step's output.\n                \n                    At least one of the following:\n                    \n                    \n                         \n                         \n                    \n                            Action groups – You define the actions that the agent should perform for the user through providing the following resources):\n                            \n                                 \n                                 \n                            \n                                    One of the following schemas to define the parameters that the agent needs to elicit from the user (each action group can use a different schema):\n                                    \n                                    \n                                         \n                                         \n                                    \n                                            An OpenAPI schema to define the API operations that the agent can invoke to perform its tasks. The OpenAPI schema  includes the parameters that need to be elicited from the user.\n                                        \n                                            A function detail schema to define the parameters that the agent can elicit from the user. These parameters can then be used for further orchestration by the agent, or you can set up how to use them in your own application.\n                                        \n                                    \n                                \n                                    (Optional) A Lambda function with the following input and output:\n                                    \n                                    \n                                         \n                                         \n                                    \n                                            Input – The API operation and/or parameters identified during orchestration.\n                                        \n                                            Output – The response from the API invocation.\n                                        \n                                \n                        \n                            Knowledge bases – Associate knowledge bases with an agent. The agent queries the knowledge base for extra context to augment response generation and input into steps of the orchestration process.\n                        \n                    \n                    \n                \n                    Prompt templates – Prompt templates are the basis for creating prompts to be provided to the FM. Agents for Amazon Bedrock exposes the default four base prompt templates that are used during the pre-processing, orchestration, knowledge base response generation, and post-processing. You can optionally edit these base prompt templates to customize your agent's behavior at each step of its sequence. You can also turn off steps for troubleshooting purposes or if you decide that a step is unnecessary. For more information, see Advanced prompts in Amazon Bedrock.\n                \n            \n            At build-time, all these components are gathered to construct base prompts for the agent to perform orchestration until the user request is completed. With advanced prompts, you can modify these base prompts with additional logic and few-shot examples to improve accuracy for each step of agent invocation. The base prompt templates contain instructions, action descriptions, knowledge base descriptions, and conversation history, all of which you can customize to modify the agent to meet your needs. You then prepare your agent, which packages all the components of the agents, including security configurations. Preparing the agent brings it into a state where it can be tested in runtime. The following image shows how build-time API operations construct your agent.\n            \n            \n                 \n                    \n                 \n                 \n            \n            \n         \n            Runtime process\n        \n            Runtime is managed by the InvokeAgent API operation. This operation starts the agent sequence, which consists of the following three main steps.\n            \n            \n                 \n                 \n                 \n            \n                    Pre-processing – Manages how the agent contextualizes and categorizes user input and can be used to validate input.\n                \n                    Orchestration – Interprets the user input, invokes action groups and queries knowledge bases, and returns output to the user or as input to continued orchestration. Orchestration consists of the following steps: \n                    \n                         \n                         \n                         \n                         \n                         \n                    \n                            The agent interprets the input with a foundation model and generates a rationale that lays out the logic for the next step it should take.\n                        \n                            The agent predicts which action in an action group it should invoke or which knowledge base it should query.\n                        \n                            If the agent predicts that it needs to invoke an action, the agent sends the parameters, determined from the user prompt, to the Lambda function configured for the action group or returns control by sending the parameters in the InvokeAgent response. If the agent doesn't have enough information to invoke the action, it might do one of the following actions:\n                            \n                                 \n                                 \n                            \n                                    Query an associated knowledge base (Knowledge base response generation) to retrieve additional context and summarize the data to augment its generation.\n                                \n                                    Reprompt the user to gather all the required parameters for the action.\n                                \n                        \n                            The agent generates an output, known as an observation, from invoking an action and/or summarizing results from a knowledge base. The agent uses the observation to augment the base prompt, which is then interpreted with a foundation model. The agent then determines if it needs to reiterate the orchestration process.\n                        \n                            This loop continues until the agent returns a response to the user or until it needs to prompt the user for extra information.\n                        \n                    \n                    During orchestration, the base prompt template is augmented with the agent instructions, action groups, and knowledge bases that you added to the agent. Then, the augmented base prompt is used to invoke the FM. The FM predicts the best possible steps and trajectory to fulfill the user input. At each iteration of orchestration, the FM predicts the API operation to invoke or the knowledge base to query.\n                    \n                \n                    Post-processing – The agent formats the final response to return to the user. This step is turned off by default.\n                \n            \n            When you invoke your agent, you can turn on a trace at runtime. With the trace, you can track the agent's rationale, actions, queries, and observations at each step of the agent sequence. The trace includes the full prompt sent to the foundation model at each step and the outputs from the foundation model, API responses, and knowledge base queries. You can use the trace to understand the agent's reasoning at each step. For more information, see Trace events in Amazon Bedrock\n            \n            As the user session with the agent continues through more InvokeAgent requests, the conversation history is preserved. The conversation history continually augments the orchestration base prompt template with context, helping improve the agent's accuracy and performance. The following diagram shows the agent's process during runtime:\n            \n            \n                 \n                    \n                 \n                 \n            \n            \n        <div><div><div><div id=\"js_error_message\"><p><img src=\"https://d1ge0kk1l5kms0.cloudfront.net/images/G/01/webservices/console/warning.png\" alt=\"Warning\" /> <strong>Javascript is disabled or is unavailable in your browser.</strong></p><p>To use the Amazon Web Services Documentation, Javascript must be enabled. Please refer to your browser's Help pages for instructions.</p></div></div></div></div>Document ConventionsAgents for Amazon BedrockSupported regions and modelsDid this page help you? - YesThanks for letting us know we're doing a good job!If you've got a moment, please tell us what we did right so we can do more of it.Did this page help you? - NoThanks for letting us know this page needs work. We're sorry we let you down.If you've got a moment, please tell us how we can make the documentation better.",
    "metadata": {
      "url": "https://docs.aws.amazon.com/bedrock/latest/userguide/agents-how.html",
      "title": "How Agents for Amazon Bedrock works - Amazon BedrockHow Agents for Amazon Bedrock works - Amazon Bedrock"
    }
  }
]